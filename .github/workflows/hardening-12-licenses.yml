name: Hardening/12 licenses

on:
  push: { branches: [hardening/12-licenses] }
  pull_request: { branches: [hardening/12-licenses] }

permissions: { contents: read }
on:
  push:
    branches: [hardening/12-licenses]
  pull_request:
    branches: [hardening/12-licenses]

permissions:
  contents: read

concurrency:
  group: licenses-${{ github.ref }}
  cancel-in-progress: true

jobs:
  licenses:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Enable Corepack & activate pnpm
        run: |
          set -euo pipefail
          corepack enable
          VER=$(node -p "(()=>{try{const pm=(require('./package.json').packageManager||'pnpm@10.14.0');return pm.split('@')[1]||'10.14.0'}catch(e){return '10.14.0'}})()")
          corepack prepare pnpm@${VER} --activate
          pnpm -v

      - name: Install deps (frozen, no scripts)
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: Generate license report
        run: |
          set -euo pipefail
          pnpm dlx -y license-checker-rseidelsohn \
            --summary --production --json > license-report.json
          test -s license-report.json

      - name: Check denylist (AGPL/GPL/LGPL/SSPL/BUSL)
        run: |
          set -euo pipefail
          re='(AGPL|^GPL|LGPL|SSPL|BUSL)'
          BAD=$(jq -r --arg re "$re" \
            '.summary|to_entries|map(select(.key|test($re;"i")))|length' license-report.json)
          if [ "$BAD" -gt 0 ]; then
            echo "::error::Disallowed licenses found:"
            jq -r --arg re "$re" '.summary|to_entries|map(select(.key|test($re;"i")))|.[]|"\(.key)\t\(.value)"' license-report.json
            exit 1
          fi
          echo "OK: denylist clean."
        with:
          node-version: 20

      - name: Enable Corepack & activate pnpm
        run: |
          set -euo pipefail
          corepack enable
          VER=$(node -p "(()=>{try{const pm=(require('./package.json').packageManager||'pnpm@10.14.0');return pm.split('@')[1]||'10.14.0'}catch(e){return '10.14.0'}})()")
          corepack prepare pnpm@${VER} --activate
          pnpm -v

      - name: Install deps (frozen, no scripts)
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: Generate license report
        run: |
          set -euo pipefail
          pnpm dlx -y license-checker-rseidelsohn \
            --summary --production --json > license-report.json
          test -s license-report.json

      - name: Check denylist (AGPL/GPL/LGPL/SSPL/BUSL)
        run: |
          set -euo pipefail
          re='(AGPL|^GPL|LGPL|SSPL|BUSL)'
          BAD=$(jq -r --arg re "$re" \
            '.summary|to_entries|map(select(.key|test($re;"i")))|length' license-report.json)
          if [ "$BAD" -gt 0 ]; then
            echo "::error::Disallowed licenses found:"
            jq -r --arg re "$re" '.summary|to_entries|map(select(.key|test($re;"i")))|.[]|"\(.key)\t\(.value)"' license-report.json
            exit 1
          fi
          echo "OK: denylist clean."

      - name: Upload license artifact
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.json
          path: reports/license-report.json
          if-no-files-found: warn
          retention-days: 7