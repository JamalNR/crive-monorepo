name: DB Migrations

on:
  workflow_dispatch:
    inputs:
      target:
        description: Target environment
        required: true
        type: choice
        options: [stg, prd]

permissions:
  contents: read

jobs:
  migrate:
    runs-on: ubuntu-latest
    env:
      TARGET: ${{ github.event.inputs.target }}
      HOST: ${{ github.event.inputs.target == 'stg' && secrets.STG_HOST || secrets.PRD_HOST }}
      SSH_KEY_B64: ${{ github.event.inputs.target == 'stg' && secrets.STG_SSH_KEY_B64 || secrets.PRD_SSH_KEY_B64 }}
      DOPPLER_TOKEN: ${{ github.event.inputs.target == 'stg' && secrets.DOPPLER_TOKEN_STG || secrets.DOPPLER_TOKEN_PRD }}
      DOPPLER_CONFIG: ${{ github.event.inputs.target == 'stg' && 'stg' || 'prd' }}

    steps:
      - uses: actions/checkout@v4

      # psql di runner (boleh sudo)
      - name: Install psql
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client

      # Ambil secrets via Doppler (action resmi) -> persist ke $GITHUB_ENV
      - name: Load env from Doppler
        uses: dopplerhq/cli-action@v3
        with:
          doppler-token: ${{ env.DOPPLER_TOKEN }}
          command: |
            doppler secrets download --no-file --format env \
              --project crive --config ${{ env.DOPPLER_CONFIG }} >> "$GITHUB_ENV"

      # Siapkan SSH
      - name: Prepare SSH
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "$SSH_KEY_B64" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts

      # Paketkan SQL
      - name: Package SQL
        run: |
          set -euo pipefail
          tar -czf migs.tar.gz sql || true
          ls -lah migs.tar.gz

      # Upload paket
      - name: Upload package
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=yes deploy@"$HOST" 'mkdir -p /deploy/migs'
          scp -o StrictHostKeyChecking=yes migs.tar.gz deploy@"$HOST":/deploy/migs/migs.tar.gz

      # Apply SQL di server; inject DATABASE_URL dari runner (tanpa doppler di server)
      - name: Apply SQL (pure psql via env)
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=yes deploy@"$HOST" "\
            set -euo pipefail; \
            cd /deploy/migs && tar -xzf migs.tar.gz || true; \
            command -v psql >/dev/null 2>&1 || (sudo apt-get update -y && sudo apt-get install -y postgresql-client); \
            export DATABASE_URL='${{ env.DATABASE_URL }}'; \
            echo '[preflight] select 1'; \
            PGSSLMODE=require psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -c 'select 1'; \
            if ls sql/up/*.sql >/dev/null 2>&1; then \
              for f in \$(ls -1 sql/up/*.sql | sort); do \
                echo \"[apply] \$f\"; \
                PGSSLMODE=require psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -f \"\$f\"; \
              done; \
            elif [ -f sql/up.sql ]; then \
              echo '[apply] sql/up.sql'; \
              PGSSLMODE=require psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -f sql/up.sql; \
            else \
              echo '[apply] tidak ada sql/up'; \
            fi \
          "
