name: DB Migrations

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  staging:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Doppler & psql
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client
          curl -Ls https://cli.doppler.com/install.sh | sh

      - name: Upload SQL
        env:
          STG_HOST: ${{ secrets.STG_HOST }}
          STG_SSH_KEY_B64: ${{ secrets.STG_SSH_KEY_B64 }}
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "$STG_SSH_KEY_B64" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H "$STG_HOST" >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=yes deploy@"$STG_HOST" 'mkdir -p /deploy/migs'
          tar -czf migs.tar.gz sql
          scp -o StrictHostKeyChecking=yes migs.tar.gz deploy@"$STG_HOST":/deploy/migs/migs.tar.gz

      - name: Run migrations on STG (SQL only)
        env:
          STG_HOST: ${{ secrets.STG_HOST }}
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_STG }}
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=yes deploy@"$STG_HOST" "
            set -euo pipefail
            cd /deploy/migs && tar -xzf migs.tar.gz
            command -v doppler >/dev/null 2>&1 || curl -Ls https://cli.doppler.com/install.sh | sudo sh
            export DOPPLER_TOKEN='${DOPPLER_TOKEN}'
            doppler run --project crive --config stg -- bash -lc '
              set -euo pipefail
              : \${DATABASE_URL:?DATABASE_URL missing}
              echo \"[preflight] cek koneksi\"
              PGSSLMODE=require psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -c \"select 1\"
              if ls sql/up/*.sql >/dev/null 2>&1; then
                for f in \$(ls -1 sql/up/*.sql | sort); do
                  echo \"[apply] \$f\"
                  PGSSLMODE=require psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -f \"\$f\"
                done
              elif [ -f sql/up.sql ]; then
                echo \"[apply] sql/up.sql\"
                PGSSLMODE=require psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -f sql/up.sql
              else
                echo \"[apply] tidak ada sql/up\"
              fi
            '
          "

  production:
    runs-on: ubuntu-latest
    needs: staging
    steps:
      - uses: actions/checkout@v4

      - name: Install Doppler & psql
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client
          curl -Ls https://cli.doppler.com/install.sh | sh

      - name: Upload SQL
        env:
          PRD_HOST: ${{ secrets.PRD_HOST }}
          PRD_SSH_KEY_B64: ${{ secrets.PRD_SSH_KEY_B64 }}
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "$PRD_SSH_KEY_B64" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H "$PRD_HOST" >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=yes deploy@"$PRD_HOST" 'mkdir -p /deploy/migs'
          tar -czf migs.tar.gz sql
          scp -o StrictHostKeyChecking=yes migs.tar.gz deploy@"$PRD_HOST":/deploy/migs/migs.tar.gz

      - name: Run migrations on PRD (SQL only)
        env:
          PRD_HOST: ${{ secrets.PRD_HOST }}
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_PRD }}
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=yes deploy@"$PRD_HOST" "
            set -euo pipefail
            cd /deploy/migs && tar -xzf migs.tar.gz
            command -v doppler >/dev/null 2>&1 || curl -Ls https://cli.doppler.com/install.sh | sudo sh
            export DOPPLER_TOKEN='${DOPPLER_TOKEN}'
            doppler run --project crive --config prd -- bash -lc '
              set -euo pipefail
              : \${DATABASE_URL:?DATABASE_URL missing}
              echo \"[preflight] cek koneksi\"
              PGSSLMODE=require psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -c \"select 1\"
              if ls sql/up/*.sql >/dev/null 2>&1; then
                for f in \$(ls -1 sql/up/*.sql | sort); do
                  echo \"[apply] \$f\"
                  PGSSLMODE=require psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -f \"\$f\"
                done
              elif [ -f sql/up.sql ]; then
                echo \"[apply] sql/up.sql\"
                PGSSLMODE=require psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -f sql/up.sql
              else
                echo \"[apply] tidak ada sql/up\"
              fi
            '
          "
