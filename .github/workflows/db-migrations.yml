name: DB Migrations

on:
  workflow_dispatch:
    inputs:
      target:
        description: Target environment
        required: true
        type: choice
        options: [stg, prd]

permissions:
  contents: read

jobs:
  migrate:
    runs-on: ubuntu-latest
    env:
      TARGET: ${{ github.event.inputs.target }}
      HOST: ${{ github.event.inputs.target == 'stg' && secrets.STG_HOST || secrets.PRD_HOST }}
      SSH_KEY_B64: ${{ github.event.inputs.target == 'stg' && secrets.STG_SSH_KEY_B64 || secrets.PRD_SSH_KEY_B64 }}
      DATABASE_URL: ${{ github.event.inputs.target == 'stg' && secrets.STG_DATABASE_URL || secrets.PRD_DATABASE_URL }}
      DOPPLER_TOKEN: ${{ github.event.inputs.target == 'stg' && secrets.DOPPLER_TOKEN_STG || secrets.DOPPLER_TOKEN_PRD }}
      DOPPLER_CONFIG: ${{ github.event.inputs.target == 'stg' && 'stg' || 'prd' }}
      
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Install psql
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client

      - name: Install Doppler CLI
        run: curl -sLf https://cli.doppler.com/install.sh | sudo sh

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v3

      - name: Load env from Doppler â†’ $GITHUB_ENV
        run: |
          set -euo pipefail
          doppler secrets download --no-file --format env \
            --project crive --config "${DOPPLER_CONFIG}" \
          | sed -E 's/^export[[:space:]]+//; s/="(.*)"$/=\1/' \
          >> "$GITHUB_ENV"

      - name: Prepare SSH
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "$SSH_KEY_B64" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts

      - name: Package SQL
        run: |
          set -euo pipefail
          tar -czf migs.tar.gz sql || true
          ls -lah migs.tar.gz

      - name: Upload package
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=yes deploy@"$HOST" 'mkdir -p /deploy/migs'
          scp -o StrictHostKeyChecking=yes migs.tar.gz deploy@"$HOST":/deploy/migs/migs.tar.gz

      - name: Apply SQL (via docker network)
        run: |
          set -euo pipefail
          
          RAW_DB='${{ env.DATABASE_URL }}'
          RAW_DB=${RAW_DB#\"}; RAW_DB=${RAW_DB%\"}
          DB_URL="${RAW_DB//sslmode=require/sslmode=disable}"

          DB_URL="${DATABASE_URL//sslmode=require/sslmode=disable}"
          DB_URL_ESC=$(printf "%s" "$DB_URL" | sed "s/'/'\"'\"'/g")

          scp -o StrictHostKeyChecking=yes migs.tar.gz deploy@"$HOST":/tmp/migs.tar.gz

          # kirim DB_URL ke sesi remote lewat prefix env pada perintah
          ssh -o StrictHostKeyChecking=yes deploy@"$HOST" "DATABASE_URL='$DB_URL_ESC' bash -se" <<'REMOTE'
          set -euo pipefail
          mkdir -p /deploy/migs && rm -rf /deploy/migs/work || true
          cd /deploy/migs
          tar -xzf /tmp/migs.tar.gz

          PG_CONT=$(docker ps --format '{{.Names}}\t{{.Ports}}' | awk '/5432/{print $1; exit}')
          NET=$(docker inspect -f '{{range $k,$v := .NetworkSettings.Networks}}{{printf "%s" $k}}{{end}}' "$PG_CONT")

          docker run --rm --network "$NET" -e DATABASE_URL="$DATABASE_URL" \
            -v "$PWD/sql:/work/sql:ro" postgres:16-alpine sh -lc '
              set -e
              echo "[preflight] select 1"; psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "select 1";
              if ls /work/sql/up/*.sql >/dev/null 2>&1; then
                for f in $(ls -1 /work/sql/up/*.sql | sort); do
                  echo "[apply] $f"; psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -f "$f";
                done
              elif [ -f /work/sql/up.sql ]; then
                echo "[apply] /work/sql/up.sql"; psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -f /work/sql/up.sql;
              else
                echo "[apply] tidak ada sql/up";
              fi
            '
          REMOTE
