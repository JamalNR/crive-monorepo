name: DB Migrations

on:
  workflow_dispatch:
    inputs:
      target:
        description: Target environment
        required: true
        type: choice
        options: [stg, prd]

permissions:
  contents: read

jobs:
  migrate:
    runs-on: ubuntu-latest
    env:
      TARGET: ${{ github.event.inputs.target }}
      HOST: ${{ github.event.inputs.target == 'stg' && secrets.STG_HOST || secrets.PRD_HOST }}
      SSH_KEY_B64: ${{ github.event.inputs.target == 'stg' && secrets.STG_SSH_KEY_B64 || secrets.PRD_SSH_KEY_B64 }}
      DOPPLER_TOKEN: ${{ github.event.inputs.target == 'stg' && secrets.DOPPLER_TOKEN_STG || secrets.DOPPLER_TOKEN_PRD }}
      DOPPLER_CONFIG: ${{ github.event.inputs.target == 'stg' && 'stg' || 'prd' }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Doppler & psql
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client
          curl -Ls https://cli.doppler.com/install.sh | sh

      - name: Prepare SSH
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "$SSH_KEY_B64" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts

      - name: Package SQL
        run: |
          set -euo pipefail
          tar -czf migs.tar.gz sql

      - name: Upload package
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=yes deploy@"$HOST" 'mkdir -p /deploy/migs'
          scp -o StrictHostKeyChecking=yes migs.tar.gz deploy@"$HOST":/deploy/migs/migs.tar.gz

      - name: Apply SQL (pure psql)
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=yes deploy@"$HOST" "\
            set -euo pipefail; \
            cd /deploy/migs && tar -xzf migs.tar.gz; \
            command -v doppler >/dev/null 2>&1 || curl -Ls https://cli.doppler.com/install.sh | sudo sh; \
            export DOPPLER_TOKEN='${DOPPLER_TOKEN}'; \
            doppler run --project crive --config ${DOPPLER_CONFIG} -- bash -lc '\
              set -euo pipefail; \
              : \${DATABASE_URL:?DATABASE_URL missing}; \
              echo \"[preflight] cek koneksi\"; \
              PGSSLMODE=require psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -c \"select 1\" >/dev/null; \
              if ls sql/up/*.sql >/dev/null 2>&1; then \
                for f in \$(ls -1 sql/up/*.sql | sort); do \
                  echo \"[apply] \$f\"; \
                  PGSSLMODE=require psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -f \"\$f\"; \
                done; \
              elif [ -f sql/up.sql ]; then \
                echo \"[apply] sql/up.sql\"; \
                PGSSLMODE=require psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -f sql/up.sql; \
              else \
                echo \"[apply] tidak ada sql/up\"; \
              fi \
            ' \
          "
