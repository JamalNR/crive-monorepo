name: DB Migrations

on:
  workflow_dispatch:
    inputs:
      target:
        description: Target environment
        required: true
        type: choice
        options: [stg, prd]

permissions:
  contents: read

jobs:
  migrate:
    runs-on: ubuntu-latest
    env:
      TARGET: ${{ github.event.inputs.target }}
      # Ambil variabel dari GitHub Secrets (BUKAN dari Doppler)
      HOST:          ${{ github.event.inputs.target == 'stg' && secrets.STG_HOST          || secrets.PRD_HOST }}
      SSH_USER:      ${{ github.event.inputs.target == 'stg' && secrets.STG_SSH_USER      || secrets.PRD_SSH_USER }}
      SSH_KEY_B64:   ${{ github.event.inputs.target == 'stg' && secrets.STG_SSH_KEY_B64   || secrets.PRD_SSH_KEY_B64 }}
      DATABASE_URL:  ${{ github.event.inputs.target == 'stg' && secrets.STG_DATABASE_URL  || secrets.PRD_DATABASE_URL }}

    steps:
      - uses: actions/checkout@v4

      - name: Install psql
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client

      - name: Prepare SSH
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "$SSH_KEY_B64" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts

      - name: Package SQL
        run: |
          set -euo pipefail
          tar -czf migs.tar.gz sql || true
          ls -lah migs.tar.gz

      - name: Upload package
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=yes $SSH_USER@"$HOST" 'mkdir -p /deploy/migs'
          scp -o StrictHostKeyChecking=yes migs.tar.gz $SSH_USER@"$HOST":/deploy/migs/migs.tar.gz

      - name: Apply SQL (psql via docker network on server)
        env:
          # kirim DATABASE_URL ke remote
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=yes $SSH_USER@"$HOST" "\
            set -euo pipefail; \
            cd /deploy/migs && tar -xzf migs.tar.gz || true; \
            # siapkan URL: matikan SSL untuk koneksi intra-network
            DB_URL=\"\${DATABASE_URL//sslmode=require/sslmode=disable}\"; \
            # cari kontainer postgres & network-nya
            PG_CONT=\$(docker ps --format '{{.Names}}\t{{.Ports}}' | awk '/5432/{print \$1; exit}'); \
            NET=\$(docker inspect -f '{{range \$k,\$v := .NetworkSettings.Networks}}{{printf \"%s\" \$k}}{{end}}' \"\$PG_CONT\"); \
            # jalankan psql dari kontainer postgres:16 di network yang sama
            docker run --rm --network \"\$NET\" \
              -e DATABASE_URL=\"\$DB_URL\" \
              -v /deploy/migs/sql:/work/sql:ro \
              postgres:16-alpine sh -lc ' \
                set -e; \
                echo \"[preflight]\"; psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -c \"select 1\"; \
                if ls /work/sql/up/*.sql >/dev/null 2>&1; then \
                  for f in \$(ls -1 /work/sql/up/*.sql | sort); do \
                    echo \"[apply] \$f\"; \
                    psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -f \"\$f\"; \
                  done; \
                elif [ -f /work/sql/up.sql ]; then \
                  echo \"[apply] /work/sql/up.sql\"; \
                  psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -f /work/sql/up.sql; \
                else \
                  echo \"[apply] no sql\"; \
                fi' \
          "
