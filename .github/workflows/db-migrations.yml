name: DB Migrations
on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment to apply (stg|prd)"
        required: true
        default: "stg"

jobs:
  dry-run:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: pguser
          POSTGRES_PASSWORD: pgpass
          POSTGRES_DB: ci_migrate
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U pguser -d ci_migrate"
          --health-interval=5s --health-timeout=5s --health-retries=20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: corepack enable
      - run: pnpm i --frozen-lockfile --ignore-scripts
      - name: Set DATABASE_URL to CI Postgres
        run: echo "DATABASE_URL=postgres://pguser:pgpass@127.0.0.1:5432/ci_migrate" >> $GITHUB_ENV
      - name: Dry-run migrations
        run: pnpm db:migrate:dry

  apply-staging:
    needs: dry-run
    if: ${{ github.event.inputs.env == 'stg' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Prepare SSH key
        run: |
          test -n "${{ secrets.STG_SSH_KEY_B64 }}" || (echo "Missing STG_SSH_KEY_B64" && exit 1)
          echo "${{ secrets.STG_SSH_KEY_B64 }}" | base64 -d > id_stg
          chmod 600 id_stg

      - name: Package migrations
        run: tar czf migs.tgz db/scripts db/migrations

      - name: Create remote dir
        run: ssh -i id_stg -o StrictHostKeyChecking=no ${{ secrets.STG_SSH_USER }}@${{ secrets.STG_SSH_HOST }} 'mkdir -p /deploy/migs/work'

      - name: Upload package (SCP)
        run: scp -i id_stg -o StrictHostKeyChecking=no migs.tgz ${{ secrets.STG_SSH_USER }}@${{ secrets.STG_SSH_HOST }}:/deploy/migs/work/migs.tgz

      - name: Apply migrations on STG (Dockerized Node)
        run: |
          ssh -i id_stg -o StrictHostKeyChecking=no ${{ secrets.STG_SSH_USER }}@${{ secrets.STG_SSH_HOST }} "
            set -euo pipefail;
            cd /deploy/migs/work;
            tar xzf migs.tgz;
            docker run --rm \
              -e DATABASE_URL='${{ secrets.STG_DATABASE_URL }}' \
              -v \$(pwd):/work -w /work \
              node:20-alpine node db/scripts/migrate.cjs up
          "

  apply-production:
    needs: dry-run
    if: ${{ github.event.inputs.env == 'prd' }}
    runs-on: ubuntu-latest
    environment:
      name: prd
      url: https://api.crive.app/healthz
    steps:
      - uses: actions/checkout@v4

      - name: Prepare SSH key
        run: |
          test -n "${{ secrets.PRD_SSH_KEY_B64 }}" || (echo "Missing PRD_SSH_KEY_B64" && exit 1)
          echo "${{ secrets.PRD_SSH_KEY_B64 }}" | base64 -d > id_prd
          chmod 600 id_prd

      - name: Package migrations
        run: tar czf migs.tgz db/scripts db/migrations

      - name: Create remote dir
        run: ssh -i id_prd -o StrictHostKeyChecking=no ${{ secrets.PRD_SSH_USER }}@${{ secrets.PRD_SSH_HOST }} 'mkdir -p /deploy/migs/work'

      - name: Upload package (SCP)
        run: scp -i id_prd -o StrictHostKeyChecking=no migs.tgz ${{ secrets.PRD_SSH_USER }}@${{ secrets.PRD_SSH_HOST }}:/deploy/migs/work/migs.tgz

      - name: Apply migrations on PRD (Dockerized Node)
        run: |
          ssh -i id_prd -o StrictHostKeyChecking=no ${{ secrets.PRD_SSH_USER }}@${{ secrets.PRD_SSH_HOST }} "
            set -euo pipefail;
            cd /deploy/migs/work;
            tar xzf migs.tgz;
            docker run --rm \
              -e DATABASE_URL='${{ secrets.PRD_DATABASE_URL }}' \
              -v \$(pwd):/work -w /work \
              node:20-alpine node db/scripts/migrate.cjs up
          "
