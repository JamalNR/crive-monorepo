name: DB Migrations

on:
  workflow_dispatch:
    inputs:
      target:
        description: Target environment
        required: true
        type: choice
        options: [stg, prd]

permissions:
  contents: read

jobs:
  migrate:
    runs-on: ubuntu-latest
    env:
      TARGET: ${{ github.event.inputs.target }}
      HOST: ${{ github.event.inputs.target == 'stg' && secrets.STG_HOST || secrets.PRD_HOST }}
      SSH_KEY_B64: ${{ github.event.inputs.target == 'stg' && secrets.STG_SSH_KEY_B64 || secrets.PRD_SSH_KEY_B64 }}
      DATABASE_URL: ${{ github.event.inputs.target == 'stg' && secrets.STG_DATABASE_URL || secrets.PRD_DATABASE_URL }}
      DOPPLER_TOKEN: ${{ github.event.inputs.target == 'stg' && secrets.DOPPLER_TOKEN_STG || secrets.DOPPLER_TOKEN_PRD }}
      DOPPLER_CONFIG: ${{ github.event.inputs.target == 'stg' && 'stg' || 'prd' }}
      
    steps:
      - uses: actions/checkout@v4

      - name: Install psql
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client

      - name: Install Doppler CLI
        run: curl -sLf https://cli.doppler.com/install.sh | sudo sh

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v3

      - name: Load env from Doppler â†’ $GITHUB_ENV
        if: ${{ env.DOPPLER_TOKEN != '' }}
        env:
          DOPPLER_TOKEN: ${{ env.DOPPLER_TOKEN }}
          DOPPLER_CONFIG: ${{ env.DOPPLER_CONFIG }}
        run: |
          doppler secrets download --no-file --format env \
            --project crive --config "$DOPPLER_CONFIG" >> "$GITHUB_ENV"

      - name: Prepare SSH
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "$SSH_KEY_B64" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts

      - name: Package SQL
        run: |
          set -euo pipefail
          tar -czf migs.tar.gz sql || true
          ls -lah migs.tar.gz

      - name: Upload package
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=yes deploy@"$HOST" 'mkdir -p /deploy/migs'
          scp -o StrictHostKeyChecking=yes migs.tar.gz deploy@"$HOST":/deploy/migs/migs.tar.gz

      - name: Apply SQL (via docker network)
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=yes deploy@"$HOST" "\
            set -eo pipefail; \
            export DATABASE_URL='${{ env.DATABASE_URL }}'; \
            if [ -z \"\$DATABASE_URL\" ]; then echo '[fatal] DATABASE_URL empty'; exit 1; fi; \
            # Di jaringan internal tidak perlu SSL
            DB_URL=\"\${DATABASE_URL//sslmode=require/sslmode=disable}\"; \
            sudo mkdir -p /deploy/migs; cd /deploy/migs; \
            sudo rm -rf work || true; mkdir -p work; \
            tar -xzf migs.tar.gz -C work || true; \
            PG_CONT=$(docker ps --format '{{.Names}}\t{{.Ports}}' | awk '/5432/{print $1; exit}'); \
            NET=$(docker inspect -f '{{range $k,$v := .NetworkSettings.Networks}}{{printf "%s" $k}}{{end}}' "$PG_CONT"); \
            docker run --rm --network \"\$NET\" \
              -e DATABASE_URL=\"\$DB_URL\" \
              -v /deploy/migs/work/sql:/work/sql:ro \
              postgres:16-alpine sh -lc '\
                set -e; \
                echo \"[preflight] select 1\"; \
                psql \"$DATABASE_URL\" -v ON_ERROR_STOP=1 -c \"select 1\"; \
                if ls /work/sql/up/*.sql >/dev/null 2>&1; then \
                  for f in \$(ls -1 /work/sql/up/*.sql | sort); do \
                    echo \"[apply] \$f\"; \
                    psql \"$DATABASE_URL\" -v ON_ERROR_STOP=1 -f \"\$f\"; \
                  done; \
                elif [ -f /work/sql/up.sql ]; then \
                  echo \"[apply] /work/sql/up.sql\"; \
                  psql \"$DATABASE_URL\" -v ON_ERROR_STOP=1 -f /work/sql/up.sql; \
                else \
                  echo \"[apply] tidak ada sql/up\"; \
                fi' \
          "
          scp -o StrictHostKeyChecking=yes migs.tar.gz deploy@"$HOST":/tmp/migs.tar.gz

      - name: Apply SQL (via docker network)
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=yes deploy@"$HOST" '
            set -euo pipefail
            rm -rf /deploy/migs && mkdir -p /deploy/migs
            tar -xzf /tmp/migs.tar.gz -C /deploy/migs || true
            command -v docker >/dev/null 2>&1 || { echo "docker tidak ada"; exit 1; }
            DB_URL="${DATABASE_URL}"
            DB_URL="${DB_URL//sslmode=require/sslmode=disable}"
            PG_CONT=$(docker ps | awk '/5432/{print $NF; exit}')
            if [ -z "$PG_CONT" ]; then
              echo "::error::Tidak menemukan container Postgres (port 5432)"
              docker ps
              exit 1
            fi
            NET=$(docker inspect "$PG_CONT" | sed -n 's/.*"Networks":{"\([^"]*\)".*/\1/p' | head -n1)
            [ -z "$NET" ] && NET="crive-stack_default"
            echo "[preflight] container=$PG_CONT net=$NET"
            docker run --rm --network "$NET" \
              -e DATABASE_URL="$DB_URL" \
              -v /deploy/migs/sql:/work/sql:ro \
              postgres:16-alpine sh -lc "
                set -e
                echo \"[preflight] select 1\"
                psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -c \"select 1\"
                if ls /work/sql/up/*.sql >/dev/null 2>&1; then
                  for f in \$(ls -1 /work/sql/up/*.sql | sort); do
                    echo \"[apply] \$f\"
                    psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -f \"\$f\"
                  done
                elif [ -f /work/sql/up.sql ]; then
                  echo \"[apply] /work/sql/up.sql\"
                  psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -f /work/sql/up.sql
                else
                  echo \"[apply] tidak ada sql/up\"
                fi
              "
          '
