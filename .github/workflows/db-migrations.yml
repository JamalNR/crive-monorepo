name: DB Migrations

on:
  workflow_dispatch:
    inputs:
      env:
        description: Target environment
        required: true
        type: choice
        options:
          - stg
          - prd

jobs:
  dry-run:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ci_migrate
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres -d ci_migrate"
          --health-interval=10s
          --health-retries=30
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: corepack enable
      - run: pnpm i --frozen-lockfile --ignore-scripts
      - name: Set DATABASE_URL (service)
        run: echo "DATABASE_URL=postgres://postgres:postgres@127.0.0.1:5432/ci_migrate" >> "$GITHUB_ENV"
      - run: pnpm db:migrate:dry

  apply-staging:
    if: ${{ github.event.inputs.env == 'stg' }}
    needs: dry-run
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.STG_SSH_HOST }}
      SSH_USER: ${{ secrets.STG_SSH_USER }}
      SSH_PORT: ${{ secrets.STG_SSH_PORT }}
      DBURL:   ${{ secrets.STG_DATABASE_URL }}
      NET:     ${{ secrets.STG_DOCKER_NETWORK }}
    steps:
      - uses: actions/checkout@v4
      - name: Prepare SSH key (STG)
        run: |
          echo "${{ secrets.STG_SSH_KEY_B64 }}" | base64 -d > id_stg
          chmod 600 id_stg
      - name: Package migrations
        run: tar czf migs.tgz db/migrations db/scripts/migrate.cjs
      - name: Upload package + env
        shell: bash
        run: |
          set -euo pipefail
          ssh -4 -p ${SSH_PORT:-22} -i id_stg -o IdentitiesOnly=yes -o StrictHostKeyChecking=no \
            "$SSH_USER@$SSH_HOST" 'mkdir -p ~/.crive-migs/work'
          printf 'export DATABASE_URL=%q\n' "$DBURL" > env.remote
          printf 'export DOCKER_NETWORK=%q\n' "${NET:-}" >> env.remote
          scp -4 -P ${SSH_PORT:-22} -i id_stg -o IdentitiesOnly=yes -o StrictHostKeyChecking=no \
            env.remote migs.tgz "$SSH_USER@$SSH_HOST":~/.crive-migs/
      - name: Apply migrations on STG
        shell: bash
        run: |
          set -euo pipefail
          ssh -4 -p ${SSH_PORT:-22} -i id_stg -o IdentitiesOnly=yes -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" '
            set -euo pipefail
            cd ~/.crive-migs
            . ./env.remote
            cd work && tar xzf ../migs.tgz
            if docker info >/dev/null 2>&1; then DOCKER=docker; else DOCKER="sudo -n docker"; fi
            NET_ARG=""
            if [ -n "${DOCKER_NETWORK:-}" ] && $DOCKER network ls --format "{{.Name}}" | grep -qx "$DOCKER_NETWORK"; then
              NET_ARG="--network $DOCKER_NETWORK"
            fi
            $DOCKER run --rm $NET_ARG \
              --add-host=host.docker.internal:host-gateway \
              -e DATABASE_URL="$DATABASE_URL" \
              -v "$PWD":/work -w /work node:20-bullseye bash -lc "
                set -euo pipefail
                npm i pg@8 --no-audit --no-fund --silent
                node db/scripts/migrate.cjs status
                node db/scripts/migrate.cjs up
              "
          '

  apply-production:
    if: ${{ github.event.inputs.env == 'prd' }}
    needs: dry-run
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.PRD_SSH_HOST }}
      SSH_USER: ${{ secrets.PRD_SSH_USER }}
      SSH_PORT: ${{ secrets.PRD_SSH_PORT }}
      DBURL:   ${{ secrets.PRD_DATABASE_URL }}
      NET:     ${{ secrets.PRD_DOCKER_NETWORK }}
    steps:
      - uses: actions/checkout@v4
      - name: Prepare SSH key (PRD)
        run: |
          echo "${{ secrets.PRD_SSH_KEY_B64 }}" | base64 -d > id_prd
          chmod 600 id_prd
      - name: Package migrations
        run: tar czf migs.tgz db/migrations db/scripts/migrate.cjs
      - name: Upload package + env
        shell: bash
        run: |
          set -euo pipefail
          ssh -4 -p ${SSH_PORT:-22} -i id_prd -o IdentitiesOnly=yes -o StrictHostKeyChecking=no \
            "$SSH_USER@$SSH_HOST" 'mkdir -p ~/.crive-migs/work'
          printf 'export DATABASE_URL=%q\n' "$DBURL" > env.remote
          printf 'export DOCKER_NETWORK=%q\n' "${NET:-}" >> env.remote
          scp -4 -P ${SSH_PORT:-22} -i id_prd -o IdentitiesOnly=yes -o StrictHostKeyChecking=no \
            env.remote migs.tgz "$SSH_USER@$SSH_HOST":~/.crive-migs/
      - name: Apply migrations on PRD
        shell: bash
        run: |
          set -euo pipefail
          ssh -4 -p ${SSH_PORT:-22} -i id_prd -o IdentitiesOnly=yes -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" '
            set -euo pipefail
            cd ~/.crive-migs
            . ./env.remote
            cd work && tar xzf ../migs.tgz
            if docker info >/dev/null 2>&1; then DOCKER=docker; else DOCKER="sudo -n docker"; fi
            NET_ARG=""
            if [ -n "${DOCKER_NETWORK:-}" ] && $DOCKER network ls --format "{{.Name}}" | grep -qx "$DOCKER_NETWORK"; then
              NET_ARG="--network $DOCKER_NETWORK"
            fi
            $DOCKER run --rm $NET_ARG \
              --add-host=host.docker.internal:host-gateway \
              -e DATABASE_URL="$DATABASE_URL" \
              -v "$PWD":/work -w /work node:20-bullseye bash -lc "
                set -euo pipefail
                npm i pg@8 --no-audit --no-fund --silent
                node db/scripts/migrate.cjs status
                node db/scripts/migrate.cjs up
              "
          '
