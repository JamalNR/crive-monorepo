name: DB Migrations

on:
  workflow_dispatch:
    inputs:
      target:
        description: Target environment
        required: true
        type: choice
        options: [stg, prd]

permissions:
  contents: read

jobs:
  migrate:
    runs-on: ubuntu-latest
    env:
      TARGET: ${{ github.event.inputs.target }}
      HOST: ${{ github.event.inputs.target == 'stg' && secrets.STG_HOST || secrets.PRD_HOST }}
      SSH_KEY_B64: ${{ github.event.inputs.target == 'stg' && secrets.STG_SSH_KEY_B64 || secrets.PRD_SSH_KEY_B64 }}

      # <<< PENTING: DATABASE_URL selalu terisi dari Secrets GitHub >>>
      DATABASE_URL: ${{ github.event.inputs.target == 'stg' && secrets.STG_DATABASE_URL || secrets.PRD_DATABASE_URL }}

      # Doppler untuk env lain (optional, aman jika tidak dipakai)
      DOPPLER_TOKEN: ${{ github.event.inputs.target == 'stg' && secrets.DOPPLER_TOKEN_STG || secrets.DOPPLER_TOKEN_PRD }}
      DOPPLER_CONFIG: ${{ github.event.inputs.target == 'stg' && 'stg' || 'prd' }}

    steps:
      - uses: actions/checkout@v4

      - name: Install psql
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client

      # Install hanya CLI Doppler (action ini TIDAK menerima 'with:')
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v3

      # Perintah terpisah untuk menulis env Doppler ke $GITHUB_ENV
      - name: Load env from Doppler → $GITHUB_ENV
        if: ${{ env.DOPPLER_TOKEN != '' }}
        env:
          DOPPLER_TOKEN: ${{ env.DOPPLER_TOKEN }}
          DOPPLER_CONFIG: ${{ env.DOPPLER_CONFIG }}
        run: |
          doppler secrets download --no-file --format env \
            --project crive --config "$DOPPLER_CONFIG" >> "$GITHUB_ENV"

      - name: Prepare SSH
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "$SSH_KEY_B64" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts

      - name: Package SQL
        run: |
          set -euo pipefail
          tar -czf migs.tar.gz sql || true
          ls -lah migs.tar.gz

      - name: Upload package
        run: |
          set -euo pipefail
          scp -o StrictHostKeyChecking=yes migs.tar.gz deploy@"$HOST":/tmp/migs.tar.gz

      # Apply SQL di server via docker network Postgres (host 'db' hanya resolve di network Docker)
      - name: Apply SQL (via docker network)
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=yes deploy@"$HOST" '
            set -euo pipefail
            # siapkan area kerja
            rm -rf /deploy/migs && mkdir -p /deploy/migs
            tar -xzf /tmp/migs.tar.gz -C /deploy/migs || true

            # pastikan psql container tersedia
            command -v docker >/dev/null 2>&1 || { echo "docker tidak ada"; exit 1; }

            # ambil DATABASE_URL dari runner (disuntik oleh GitHub via env)
            DB_URL="${DATABASE_URL}"

            # override sslmode (runner bisa punya require)
            DB_URL="${DB_URL//sslmode=require/sslmode=disable}"

            # cari container postgres & network yg mem-publish 5432
            PG_CONT="$(docker ps --format "{{.Names}}\t{{.Ports}}" | awk "/5432/{print \$1; exit}")"
            [ -n "$PG_CONT" ] || { echo "postgres container tidak ditemukan"; exit 1; }
            NET="$(docker inspect -f "{{range \$k,\$v := .NetworkSettings.Networks}}{{printf \"%s\" \$k}}{{end}}" "$PG_CONT")"

            echo "[preflight] psql from docker on network: $NET, container: $PG_CONT"
            docker run --rm --network "$NET" \
              -e DATABASE_URL="$DB_URL" \
              -v /deploy/migs/sql:/work/sql:ro \
              postgres:16-alpine sh -lc "
                set -e
                echo \"[preflight] select 1\"
                psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -c \"select 1\"
                if ls /work/sql/up/*.sql >/dev/null 2>&1; then
                  for f in \$(ls -1 /work/sql/up/*.sql | sort); do
                    echo \"[apply] \$f\"
                    psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -f \"\$f\"
                  done
                elif [ -f /work/sql/up.sql ]; then
                  echo \"[apply] /work/sql/up.sql\"
                  psql \"\$DATABASE_URL\" -v ON_ERROR_STOP=1 -f /work/sql/up.sql
                else
                  echo \"[apply] tidak ada sql/up\"
                fi
              "
          '
YAML

git add .github/workflows/db-migrations.yml
git commit -m "db(migs): fix env export; set DATABASE_URL via GH Secrets; doppler run step"
git push -u origin fix/migs-dburl
gh pr create --fill --base main
2) Merge PR & jalankan workflow (lokal)
bash
Salin kode
# (opsional) langsung merge dari CLI
gh pr merge --squash --auto

# tunggu PR merged, lalu trigger workflow STG
gh workflow run "DB Migrations" -f target=stg

# pantau sampai selesai (ulang command ini hingga statusnya success)
gh run list --workflow "DB Migrations" -L 1
gh run view $(gh run list --workflow "DB Migrations" -L 1 --json databaseId -q '.[0].databaseId') --log

# jika STG hijau, jalankan PRD
gh workflow run "DB Migrations" -f target=prd
3) (Kalau masih merah) cek cepat dari server (server)
bash
Salin kode
# masuk server
ssh -o IdentitiesOnly=yes -i ~/.ssh/id_ed25519_prd_ci deploy@209.97.172.49

# pastikan container postgres & network terdeteksi
docker ps --format '{{.Names}}\t{{.Ports}}' | awk '/5432/ {print}'
PG_CONT=$(docker ps --format '{{.Names}}\t{{.Ports}}' | awk '/5432/{print $1; exit}')
NET=$(docker inspect -f '{{range $k,$v := .NetworkSettings.Networks}}{{printf "%s" $k}}{{end}}' "$PG_CONT")
echo "PG_CONT=$PG_CONT NET=$NET"

# uji koneksi pakai docker psql dengan DATABASE_URL (ambil dari GH Secret yang dipakai runner)
# (ganti URL di bawah hanya jika perlu debugging manual)
DB_URL='postgresql://<user>:<pass>@db:5432/<db>?sslmode=disable'
docker run --rm --network "$NET" -e DATABASE_URL="$DB_URL" postgres:16-alpine \
  sh -lc 'psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "select 1 as ok"; \ 
          psql "$DATABASE_URL" -c "\dt"'
Kenapa ini menyelesaikan error kamu
“Unexpected input(s) 'doppler-token', 'command'”: action Doppler memang tidak menerima input; dia hanya memasang CLI. Sekarang kita memanggil doppler secrets download … >> $GITHUB_ENV di step run terpisah, sehingga env dari Doppler benar-benar masuk ke job.

DATABASE_URL: unbound variable: sekarang DATABASE_URL dipasang di job env dari GitHub Secrets (punya fallback yang jelas, tidak tergantung Doppler). Jadi step Apply selalu punya nilai.

“could not translate host name 'db'”: kita tidak lagi menjalankan psql langsung dari host, tapi menjalankannya di dalam container postgres:16-alpine yang join ke network Docker yang sama dengan Postgres. Dengan begitu hostname db pasti bisa di-resolve.

Jalankan persis perintah di atas. Kalau ada output merah lagi, kirimkan potongan log step “Apply SQL (via docker network)” baris [preflight] sampai baris error—nanti kita bedah lagi.






Anda bilang:
Invalid workflow file: .github/workflows/db-migrations.yml#L1
(Line: 26, Col: 7): 'DATABASE_URL' is already defined


ChatGPT bilang:

Selesai berpikir selama beberapa detik

Selesai berpikir selama 37s
Oke, error itu karena kunci YAML DATABASE_URL didefinisikan dua kali di workflow. Kita rapikan dengan menghapus step Doppler dan memakai GitHub Secrets STG_DATABASE_URL / PRD_DATABASE_URL saja. Jalankan perintah berikut dari laptop (local):

bash
Salin kode
# 1) Buat branch perbaikan
git switch -c fix/db-migs-url-dup

# 2) Tulis ulang workflow agar bersih (tanpa duplikasi DATABASE_URL & tanpa Doppler)
cat > .github/workflows/db-migrations.yml <<'YML'
name: DB Migrations

on:
  workflow_dispatch:
    inputs:
      target:
        description: Target environment
        required: true
        type: choice
        options: [stg, prd]

permissions:
  contents: read

jobs:
  migrate:
    runs-on: ubuntu-latest
    env:
      TARGET: ${{ github.event.inputs.target }}
      HOST: ${{ github.event.inputs.target == 'stg' && secrets.STG_HOST || secrets.PRD_HOST }}
      SSH_KEY_B64: ${{ github.event.inputs.target == 'stg' && secrets.STG_SSH_KEY_B64 || secrets.PRD_SSH_KEY_B64 }}
      DATABASE_URL: ${{ github.event.inputs.target == 'stg' && secrets.STG_DATABASE_URL || secrets.PRD_DATABASE_URL }}

    steps:
      - uses: actions/checkout@v4

      - name: Install psql client
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client

      - name: Prepare SSH
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "$SSH_KEY_B64" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts

      - name: Package SQL
        run: |
          set -euo pipefail
          tar -czf migs.tar.gz sql || true
          ls -lah migs.tar.gz

      - name: Upload package
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=yes deploy@"$HOST" 'mkdir -p /deploy/migs'
          scp -o StrictHostKeyChecking=yes migs.tar.gz deploy@"$HOST":/deploy/migs/migs.tar.gz

      - name: Apply SQL (via docker network on server)
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=yes deploy@"$HOST" "\
            set -euo pipefail; \
            cd /deploy/migs && tar -xzf migs.tar.gz || true; \
            DB_URL=\"${{ env.DATABASE_URL }}\"; \
            # nonaktifkan sslmode=require untuk psql image
            DB_URL=\${DB_URL//sslmode=require/sslmode=disable}; \
            # cari container postgres pertama yg expose 5432
            PG_CONT=\$(docker ps --format '{{.Names}}\t{{.Ports}}' | awk '/5432/{print \$1; exit}'); \
            # ambil nama network dari container tsb
            NET=\$(docker inspect -f '{{range \$k,\$v := .NetworkSettings.Networks}}{{printf \"%s\" \$k}}{{end}}' \"\$PG_CONT\"); \
            echo \"[preflight] select 1\"; \
            docker run --rm --network \"\$NET\" \
              -e DATABASE_URL=\"\$DB_URL\" \
              -v /deploy/migs/sql:/work/sql:ro \
              postgres:16-alpine sh -lc '\
                set -e; \
                psql \"$DATABASE_URL\" -v ON_ERROR_STOP=1 -c \"select 1\"; \
                if ls /work/sql/up/*.sql >/dev/null 2>&1; then \
                  for f in \$(ls -1 /work/sql/up/*.sql | sort); do \
                    echo \"[apply] \$f\"; \
                    psql \"$DATABASE_URL\" -v ON_ERROR_STOP=1 -f \"\$f\"; \
                  done; \
                elif [ -f /work/sql/up.sql ]; then \
                  echo \"[apply] /work/sql/up.sql\"; \
                  psql \"$DATABASE_URL\" -v ON_ERROR_STOP=1 -f /work/sql/up.sql; \
                else \
                  echo \"[apply] tidak ada sql/up\"; \
                fi' \
          "
YML
