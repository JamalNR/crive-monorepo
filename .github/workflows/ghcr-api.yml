name: Build & Push API image to GHCR

on:
  push:
    branches: [ main ]
    paths:
      - "apps/api/**"
      - ".github/workflows/ghcr-api.yml"
  pull_request:
    branches: [ main ]
    paths:
      - "apps/api/**"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE: ${{ github.repository }}/api

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      # generate tags & labels
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE }}
          tags: |
            type=raw,value=rc
            type=sha,format=short,prefix=sha-

      # hanya perlu login saat benar-benar push
      - name: Login to GHCR
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build di PR (tanpa push)
      - name: Build (PR only)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Build & Push saat push ke main
      - name: Build & Push (main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Verifikasi image tersedia di GHCR
      - name: Verify images (main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        shell: bash
        run: |
          set -euo pipefail
          IMG="${{ env.REGISTRY }}/${{ env.IMAGE }}"
          SHORT="${GITHUB_SHA::7}"
          for i in {1..12}; do
            docker pull "${IMG}:rc" && break || { echo "rc not ready ($i)"; sleep 5; }
          done
          for i in {1..12}; do
            docker pull "${IMG}:sha-${SHORT}" && break || { echo "sha not ready ($i)"; sleep 5; }
          done
