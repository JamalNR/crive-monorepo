name: Build & Push API to GHCR

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/api/**'
      - '.github/workflows/ghcr-api.yml'
      - '.dockerignore'
      - 'pnpm-workspace.yaml'
      - 'pnpm-lock.yaml'
      - 'package.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/api/**'
      - '.github/workflows/ghcr-api.yml'
      - '.dockerignore'
      - 'pnpm-workspace.yaml'
      - 'pnpm-lock.yaml'
      - 'package.json'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=rc
            type=sha,format=short,prefix=sha-

      - name: Build and (conditionally) push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify images are available
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        shell: bash
        run: |
          set -euo pipefail
          short_sha="${GITHUB_SHA:0:7}"
          for i in {1..10}; do
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:rc && break || { echo "rc not ready (attempt $i)"; sleep 5; }
          done
          for i in {1..10}; do
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-$short_sha && break || { echo "sha not ready (attempt $i)"; sleep 5; }
          done
