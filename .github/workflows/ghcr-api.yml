name: Build & Push API

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/api/**'
      - '.github/workflows/ghcr-api.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/api/**'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/api

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        if: ${{ github.event_name == 'push' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=rc
            type=sha,format=short,prefix=sha-

      # Build saat PR (tanpa push)
      - name: Build (PR)
        if: ${{ github.event_name == 'pull_request' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Build & push saat push ke main
      - name: Build & Push (main)
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Verifikasi image bisa di-pull
      - name: Verify
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        shell: bash
        run: |
          set -euo pipefail
          IMG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          for i in {1..12}; do
            docker pull "$IMG:rc" && break || { echo "rc not ready ($i)"; sleep 5; }
          done
          SHA=${GITHUB_SHA::7}
          for i in {1..12}; do
            docker pull "$IMG:sha-$SHA" && break || { echo "sha not ready ($i)"; sleep 5; }
          done
