name: CI

on:
  push:
    branches: [ "main", "feature/**" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    name: lint (${{ matrix.app }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [api, admin, shared]
        node: [20]
    steps:
      - uses: actions/checkout@v4

      # PNPM terlebih dahulu (versi 10.4.0)
      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: "10.4.0"
          run_install: false

      # Node tanpa cache (selalu ada)
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      # Aktifkan cache PNPM hanya jika lockfile ada
      - name: Enable PNPM cache
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      # Tetapkan WORKDIR (ditulis ke $GITHUB_ENV)
      - name: Set workdir env
        run: |
          if [ "${{ matrix.app }}" = "api" ]; then echo "WORKDIR=apps/api" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "admin" ]; then echo "WORKDIR=apps/admin" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "shared" ]; then echo "WORKDIR=packages/shared" >> $GITHUB_ENV; fi

      # Gunakan env di langkah berikutnya (hindari /node_modules permission)
      - name: Prepare node_modules folders
        run: |
          mkdir -p node_modules
          mkdir -p "${{ env.WORKDIR }}/node_modules"

      # Cache node_modules per workspace (hanya jika lockfile ada)
      - name: Cache node_modules
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ${{ env.WORKDIR }}/node_modules
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ matrix.app }}-nodemod-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node${{ matrix.node }}-${{ matrix.app }}-nodemod-

      - run: echo "lint ${{ matrix.app }} ready"

  test:
    name: test (${{ matrix.app }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [api, admin, shared]
        node: [20]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: "10.4.0"
          run_install: false
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - name: Enable PNPM cache
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml
      - name: Set workdir env
        run: |
          if [ "${{ matrix.app }}" = "api" ]; then echo "WORKDIR=apps/api" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "admin" ]; then echo "WORKDIR=apps/admin" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "shared" ]; then echo "WORKDIR=packages/shared" >> $GITHUB_ENV; fi
      - name: Prepare node_modules folders
        run: |
          mkdir -p node_modules
          mkdir -p "${{ env.WORKDIR }}/node_modules"
      - name: Cache node_modules
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ${{ env.WORKDIR }}/node_modules
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ matrix.app }}-nodemod-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node${{ matrix.node }}-${{ matrix.app }}-nodemod-
      - run: echo "test ${{ matrix.app }} ready"

  build:
    name: build (${{ matrix.app }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [api, admin, shared]
        node: [20]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: "10.4.0"
          run_install: false
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - name: Enable PNPM cache
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml
      - name: Set workdir env
        run: |
          if [ "${{ matrix.app }}" = "api" ]; then echo "WORKDIR=apps/api" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "admin" ]; then echo "WORKDIR=apps/admin" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "shared" ]; then echo "WORKDIR=packages/shared" >> $GITHUB_ENV; fi
      - name: Prepare node_modules folders
        run: |
          mkdir -p node_modules
          mkdir -p "${{ env.WORKDIR }}/node_modules"
      - name: Cache node_modules
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ${{ env.WORKDIR }}/node_modules
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ matrix.app }}-nodemod-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node${{ matrix.node }}-${{ matrix.app }}-nodemod-
      - run: echo "build ${{ matrix.app }} ready"
  job_lint:
    name: job lint
    runs-on: ubuntu-latest
    needs: [lint]
    if: ${{ always() }}
    steps:
      - name: Verify lint matrices
        run: |
          echo "needs.lint.result=${{ needs.lint.result }}"
          if [ "${{ needs.lint.result }}" != "success" ]; then
            echo "Lint matrix failed"; exit 1; fi
          echo "Lint OK"

  job_test:
    name: job test
    runs-on: ubuntu-latest
    needs: [test]
    if: ${{ always() }}
    steps:
      - name: Verify test matrices
        run: |
          echo "needs.test.result=${{ needs.test.result }}"
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "Test matrix failed"; exit 1; fi
          echo "Test OK"

  job_build:
    name: job build
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ always() }}
    steps:
      - name: Verify build matrices
        run: |
          echo "needs.build.result=${{ needs.build.result }}"
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "Build matrix failed"; exit 1; fi
          echo "Build OK"
