name: CI

on:
  push:
    branches: ["main", "feature/**"]
  pull_request:
<<<<<<< HEAD
    branches: [ "main" ]
  group: ci-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
=======
    branches: ["main"]
>>>>>>> afdc627 (ci(stage8): clean YAML, gate build behind lint+test)

jobs:
  lint:
    name: lint (${{ matrix.app }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        app: [api, admin, shared]
        node: [20]
    steps:
      - uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 10.4.0
          run_install: false

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Set workdir
        run: |
          if [ "${{ matrix.app }}" = "api" ]; then echo "WORKDIR=apps/api" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "admin" ]; then echo "WORKDIR=apps/admin" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "shared" ]; then echo "WORKDIR=packages/shared" >> $GITHUB_ENV; fi

      - name: Install deps (workspace)
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        run: pnpm install --frozen-lockfile

      - name: Lint root (once)
        if: ${{ matrix.app == 'api' }}
        run: pnpm run --if-present -s lint

      - name: Lint app
        working-directory: ${{ env.WORKDIR }}
        run: pnpm run --if-present -s lint

  test:
    name: test (${{ matrix.app }})
    runs-on: ubuntu-latest
    needs: [lint]
    strategy:
      fail-fast: false
      matrix:
        app: [api, admin, shared]
        node: [20]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 10.4.0
          run_install: false
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml
      - name: Set workdir
        run: |
          if [ "${{ matrix.app }}" = "api" ]; then echo "WORKDIR=apps/api" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "admin" ]; then echo "WORKDIR=apps/admin" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "shared" ]; then echo "WORKDIR=packages/shared" >> $GITHUB_ENV; fi
      - name: Install deps (workspace)
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        run: pnpm install --frozen-lockfile
      - name: Test app
        working-directory: ${{ env.WORKDIR }}
        run: pnpm run --if-present -s test:ci

  build:
    name: build (${{ matrix.app }})
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      fail-fast: false
      matrix:
        app: [api, admin, shared]
        node: [20]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 10.4.0
          run_install: false
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml
      - name: Set workdir
        run: |
          if [ "${{ matrix.app }}" = "api" ]; then echo "WORKDIR=apps/api" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "admin" ]; then echo "WORKDIR=apps/admin" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "shared" ]; then echo "WORKDIR=packages/shared" >> $GITHUB_ENV; fi
      - name: Install deps (workspace)
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        run: pnpm install --frozen-lockfile
      - name: Build app
        working-directory: ${{ env.WORKDIR }}
        run: pnpm run --if-present -s build

  job_lint:
    name: job lint
    runs-on: ubuntu-latest
    needs: [lint]
    if: ${{ always() }}
    steps:
      - run: |
          echo "needs.lint.result=${{ needs.lint.result }}"
          test "${{ needs.lint.result }}" = "success"

  job_test:
    name: job test
    runs-on: ubuntu-latest
    needs: [test]
    if: ${{ always() }}
    steps:
      - run: |
          echo "needs.test.result=${{ needs.test.result }}"
          test "${{ needs.test.result }}" = "success"

  job_build:
    name: job build
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ always() }}
    steps:
      - run: |
          echo "needs.build.result=${{ needs.build.result }}"
          test "${{ needs.build.result }}" = "success"
