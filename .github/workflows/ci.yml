name: CI

on:
  push:
    branches: [ "main", "feature/**" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    name: lint (${{ matrix.app }})
    runs-on: ubuntu-latest
    strategy:
      matrix: { app: [api, admin, shared], node: [20] }
    steps:
      - uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: "10.4.0"
          run_install: false

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Enable PNPM cache
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Set workdir env
        run: |
          if [ "${{ matrix.app }}" = "api" ]; then echo "WORKDIR=apps/api" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "admin" ]; then echo "WORKDIR=apps/admin" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "shared" ]; then echo "WORKDIR=packages/shared" >> $GITHUB_ENV; fi

      - name: Prepare node_modules folders
        run: |
          mkdir -p node_modules
          mkdir -p "${{ env.WORKDIR }}/node_modules"

      - name: Cache node_modules
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ${{ env.WORKDIR }}/node_modules
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ matrix.app }}-nodemod-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node${{ matrix.node }}-${{ matrix.app }}-nodemod-

      # === Stage 5: Install deps (root workspace) ===
      - name: Install dependencies (workspace)
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        run: pnpm install --frozen-lockfile

      - run: echo "lint ${{ matrix.app }} ready"

  test:
    name: test (${{ matrix.app }})
    runs-on: ubuntu-latest
    strategy:
      matrix: { app: [api, admin, shared], node: [20] }
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: "10.4.0"
          run_install: false
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Enable PNPM cache
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Set workdir env
        run: |
          if [ "${{ matrix.app }}" = "api" ]; then echo "WORKDIR=apps/api" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "admin" ]; then echo "WORKDIR=apps/admin" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "shared" ]; then echo "WORKDIR=packages/shared" >> $GITHUB_ENV; fi

      - name: Prepare node_modules folders
        run: |
          mkdir -p node_modules
          mkdir -p "${{ env.WORKDIR }}/node_modules"

      - name: Cache node_modules
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ${{ env.WORKDIR }}/node_modules
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ matrix.app }}-nodemod-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node${{ matrix.node }}-${{ matrix.app }}-nodemod-

      # === Stage 5: Install deps (root workspace) ===
      - name: Install dependencies (workspace)
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        run: pnpm install --frozen-lockfile

      - run: echo "test ${{ matrix.app }} ready"

  build:
    name: build (${{ matrix.app }})
    runs-on: ubuntu-latest
    strategy:
      matrix: { app: [api, admin, shared], node: [20] }
    steps:
      - uses: actions/checkout@v4

      # Tooling baseline (tetap sesuai Stage-5)
      - uses: pnpm/action-setup@v3
        with:
          version: "10.4.0"
          run_install: false
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      # Cache PNPM (berdasarkan lockfile)
      - name: Enable PNPM cache
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      # Tentukan workdir per app (env.WORKDIR)
      - name: Set workdir env
        run: |
          if [ "${{ matrix.app }}" = "api" ]; then echo "WORKDIR=apps/api" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "admin" ]; then echo "WORKDIR=apps/admin" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "shared" ]; then echo "WORKDIR=packages/shared" >> $GITHUB_ENV; fi

      # Siapkan folder agar cache node_modules tidak permission denied
      - name: Prepare node_modules folders
      - name: Prepare node_modules folders
        run: |
          mkdir -p node_modules
          mkdir -p "${{ env.WORKDIR }}/node_modules"

      # Cache node_modules per app (opsional, guarded by lockfile)
      - name: Cache node_modules
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ${{ env.WORKDIR }}/node_modules
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ matrix.app }}-nodemod-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node${{ matrix.node }}-${{ matrix.app }}-nodemod-

      # Install deps (root workspace) â€“ konsisten dgn Stage-5
      - name: Install dependencies (workspace)
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        run: pnpm install --frozen-lockfile

      # === Build aplikasi per-app (tidak merusak; hanya jika script ada) ===
      - name: Build app
        working-directory: ${{ env.WORKDIR }}
        run: pnpm run -s build --if-present

      # Tentukan artefak yang akan diunggah (per app)
      - name: Set artifact path
        id: setpath
        run: |
          NAME="${{ matrix.app }}-artifact"
          PATH_OUT=""
          if [ "${{ matrix.app }}" = "api" ] && [ -d "${{ env.WORKDIR }}/dist" ]; then
            PATH_OUT="${{ env.WORKDIR }}/dist"
          fi
          if [ "${{ matrix.app }}" = "admin" ]; then
            if [ -d "${{ env.WORKDIR }}/.next/standalone" ]; then
              PATH_OUT="${{ env.WORKDIR }}/.next/standalone"
            elif [ -d "${{ env.WORKDIR }}/.next" ]; then
              PATH_OUT="${{ env.WORKDIR }}/.next"
            fi
          fi
          if [ "${{ matrix.app }}" = "shared" ] && [ -d "${{ env.WORKDIR }}/dist" ]; then
            PATH_OUT="${{ env.WORKDIR }}/dist"
          fi
          echo "ARTIFACT_NAME=$NAME" >> $GITHUB_ENV
          echo "ARTIFACT_PATH=$PATH_OUT" >> $GITHUB_ENV
          echo "artifact-path=$PATH_OUT" >> $GITHUB_OUTPUT

      # Upload artefak (hanya jika path ada)
      - name: Upload build artifact
        if: ${{ steps.setpath.outputs.artifact-path != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}
          if-no-files-found: ignore
          retention-days: 7

      - run: echo "build ${{ matrix.app }} done"

  # Aggregator checks untuk branch protection
  job_lint:
    name: job lint
    runs-on: ubuntu-latest
    needs: [lint]
    if: ${{ always() }}
    steps:
      - run: |
          echo "needs.lint.result=${{ needs.lint.result }}"
          test "${{ needs.lint.result }}" = "success"

  job_test:
    name: job test
    runs-on: ubuntu-latest
    needs: [test]
    if: ${{ always() }}
    steps:
      - run: |
          echo "needs.test.result=${{ needs.test.result }}"
          test "${{ needs.test.result }}" = "success"

  job_build:
    name: job build
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ always() }}
    steps:
      - run: |
          echo "needs.build.result=${{ needs.build.result }}"
          test "${{ needs.build.result }}" = "success"
