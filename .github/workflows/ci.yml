name: CI

on:
  push:
    branches: [ "main", "feature/**" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    name: lint (${{ matrix.app }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [api, admin, shared]
        node: [20]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: "10.4.0"
          run_install: false
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - run: echo "lint ${{ matrix.app }} ready"

  test:
    name: test (${{ matrix.app }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [api, admin, shared]
        node: [20]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: "10.4.0"
          run_install: false
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - run: echo "test ${{ matrix.app }} ready"

  build:
    name: build (${{ matrix.app }})
    needs: [lint, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [api, admin, shared]
        node: [20]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: "10.4.0"
          run_install: false
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - run: echo "build ${{ matrix.app }} done"

  job_lint:
    name: job lint
    runs-on: ubuntu-latest
    needs: [lint]
    if: ${{ always() }}
    steps:
      - run: |
          echo "needs.lint.result=${{ needs.lint.result }}"
          test "${{ needs.lint.result }}" = "success"

  job_test:
    name: job test
    runs-on: ubuntu-latest
    needs: [test]
    if: ${{ always() }}
    steps:
      - run: |
          echo "needs.test.result=${{ needs.test.result }}"
          test "${{ needs.test.result }}" = "success"

  job_build:
    name: job build
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ always() }}
    steps:
      - run: |
          echo "needs.build.result=${{ needs.build.result }}"
          test "${{ needs.build.result }}" = "success"

  build_prd:
    if: ${{ github.ref == 'refs/heads/main' && github.event_name != 'pull_request' }}
    name: build (prd) (${{ matrix.app }})
    runs-on: ubuntu-latest
    environment: prd
    env:
      DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_PRD }}
    strategy:
      matrix:
        app: [api, admin, shared]
        node: [20]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: "10.4.0"
          run_install: false
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      # âœ… FIX: Install Doppler CLI tanpa sudo
      - name: Install Doppler CLI
        run: |
          curl -Ls https://github.com/DopplerHQ/cli/releases/latest/download/doppler-linux-amd64.tar.gz -o doppler.tar.gz
          tar -xzf doppler.tar.gz
          mkdir -p $HOME/bin
          mv doppler $HOME/bin/doppler
          echo "$HOME/bin" >> $GITHUB_PATH
          doppler --version

      - name: Verify Doppler auth (prd)
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_PRD }}
        run: doppler me

      - name: Build (with Doppler)
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_PRD }}
        run: |
          doppler run --config prd -- pnpm -r install --frozen-lockfile
          doppler run --config prd -- pnpm -r build
