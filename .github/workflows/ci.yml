name: CI

on:
  push:
    branches: ['main', 'feature/**']
  pull_request:
    branches: ['main']

jobs:
  lint:
    name: lint (${{ matrix.app }})
    runs-on: ubuntu-latest
    strategy:
      matrix: { app: [api, admin, shared], node: [20] }
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with: { version: '10.4.0', run_install: false }
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml
      - name: Set workdir env
        run: |
          if [ "${{ matrix.app }}" = "api" ]; then echo "WORKDIR=apps/api" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "admin" ]; then echo "WORKDIR=apps/admin" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "shared" ]; then echo "WORKDIR=packages/shared" >> $GITHUB_ENV; fi
      - name: Prepare node_modules folders
        run: |
          mkdir -p node_modules
          mkdir -p "${{ env.WORKDIR }}/node_modules"
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ${{ env.WORKDIR }}/node_modules
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ matrix.app }}-nodemod
          restore-keys: |
            ${{ runner.os }}-node${{ matrix.node }}-${{ matrix.app }}-nodemod
      - name: Install dependencies (workspace)
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        run: pnpm install --frozen-lockfile
      - name: App lint
        working-directory: ${{ env.WORKDIR }}
        run: pnpm run -s lint --if-present

  test:
    name: test (${{ matrix.app }})
    runs-on: ubuntu-latest
    strategy:
      matrix: { app: [api, admin, shared], node: [20] }
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with: { version: '10.4.0', run_install: false }
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml
      - name: Set workdir env
        run: |
          if [ "${{ matrix.app }}" = "api" ]; then echo "WORKDIR=apps/api" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "admin" ]; then echo "WORKDIR=apps/admin" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "shared" ]; then echo "WORKDIR=packages/shared" >> $GITHUB_ENV; fi
      - name: Prepare node_modules folders
        run: |
          mkdir -p node_modules
          mkdir -p "${{ env.WORKDIR }}/node_modules"
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ${{ env.WORKDIR }}/node_modules
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ matrix.app }}-nodemod
          restore-keys: |
            ${{ runner.os }}-node${{ matrix.node }}-${{ matrix.app }}-nodemod
      - name: Install dependencies (workspace)
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        run: pnpm install --frozen-lockfile
      - name: App test
        working-directory: ${{ env.WORKDIR }}
        run: pnpm run -s test --if-present

  build:
    name: build (${{ matrix.app }})
    runs-on: ubuntu-latest
    strategy:
      matrix: { app: [api, admin, shared], node: [20] }
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with: { version: '10.4.0', run_install: false }
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml
      - name: Set workdir env
        run: |
          if [ "${{ matrix.app }}" = "api" ]; then echo "WORKDIR=apps/api" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "admin" ]; then echo "WORKDIR=apps/admin" >> $GITHUB_ENV; fi
          if [ "${{ matrix.app }}" = "shared" ]; then echo "WORKDIR=packages/shared" >> $GITHUB_ENV; fi
      - name: Prepare node_modules folders
        run: |
          mkdir -p node_modules
          mkdir -p "${{ env.WORKDIR }}/node_modules"
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ${{ env.WORKDIR }}/node_modules
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ matrix.app }}-nodemod
          restore-keys: |
            ${{ runner.os }}-node${{ matrix.node }}-${{ matrix.app }}-nodemod
      - name: Install dependencies (workspace)
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        run: pnpm install --frozen-lockfile
      - name: Build app
        working-directory: ${{ env.WORKDIR }}
        run: pnpm run -s build --if-present

      # artifacts (stage 7)
      - name: Upload API dist
        if: ${{ matrix.app == 'api' && hashFiles('apps/api/dist/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: api-dist-${{ github.sha }}
          path: apps/api/dist/**
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload Admin standalone
        if: ${{ matrix.app == 'admin' && hashFiles('apps/admin/.next/standalone/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: admin-standalone-${{ github.sha }}
          path: apps/admin/.next/standalone/**
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload Admin .next
        if: ${{ matrix.app == 'admin' && hashFiles('apps/admin/.next/standalone/**') == '' }}
        uses: actions/upload-artifact@v4
        with:
          name: admin-next-${{ github.sha }}
          path: apps/admin/.next/**
          if-no-files-found: ignore
          retention-days: 7

  job_lint:
    name: job lint
    runs-on: ubuntu-latest
    needs: [lint]
    if: ${{ always() }}
    steps:
      - run: |
          echo "needs.lint.result=${{ needs.lint.result }}"
          test "${{ needs.lint.result }}" = "success"

  job_test:
    name: job test
    runs-on: ubuntu-latest
    needs: [test]
    if: ${{ always() }}
    steps:
      - run: |
          echo "needs.test.result=${{ needs.test.result }}"
          test "${{ needs.test.result }}" = "success"

  job_build:
    name: job build
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ always() }}
    steps:
      - run: |
          echo "needs.build.result=${{ needs.build.result }}"
          test "${{ needs.build.result }}" = "success"
